{"ast":null,"code":"var _jsxFileName = \"D:\\\\Edgedownload\\\\dacheng\\\\\\u53BB\\u4E2D\\u5FC3\\u5316NFT\\u62CD\\u5356\\u5E73\\u53F0\\\\src\\\\App.js\";\nimport React from \"react\";\nimport { HashRouter, Route } from \"react-router-dom\";\nimport './App.css';\nimport Web3 from \"web3\";\nimport Navbar from \"./components/Navbar/Navbar\";\nimport Home from \"./components/Home/Home\";\nimport Metamask from \"./components/Metamask\";\nimport NoContract from \"./components/NoContract\";\nimport Loading from \"./components/Loading/Loading\";\nimport Marketplace from \"./components/Markerplace/Marketplace\";\nimport Create from \"./components/Create/Create\";\nimport Queries from \"./components/Queries/Queries\";\nimport MyTokens from \"./components/MyTokens/MyTokens\";\nimport MyAuctions from \"./components/MyAuctions/MyAuctions\";\nimport NFTAuction from \"./build/contracts/NFTAuction.json\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.componentWillMount = async () => {\n      await this.loadWeb3();\n      await this.loadBlockChain();\n    };\n\n    this.tick = async () => {\n      if (this.state.NFTContract) {\n        let currentTime = await this.state.NFTContract.methods.getTime().call(); // console.log(\"time:\", currentTime);\n\n        this.setState({\n          currentTime\n        });\n      }\n    };\n\n    this.loadWeb3 = async () => {\n      if (window.ethereum) {\n        window.web3 = new Web3(window.ethereum);\n      } else if (window.web3) {\n        window.web3 = new Web3(window.web3.currentProvider);\n      } else {\n        window.alert(\"Non-Ethereum browser detected. You should consider trying MetaMask.\");\n      }\n    };\n\n    this.loadBlockChain = async () => {\n      const web3 = window.web3;\n      const accounts = await web3.eth.getAccounts();\n      if (accounts.length === 0) this.setState({\n        metamaskConnected: false\n      });else {\n        this.setState({\n          metamaskConnected: true\n        });\n        this.setState({\n          loading: true\n        });\n        this.setState({\n          accountAddress: accounts[0]\n        });\n        let balance = await web3.eth.getBalance(accounts[0]);\n        balance = web3.utils.fromWei(balance, \"ether\");\n        this.setState({\n          accountBalance: balance\n        });\n        this.setState({\n          loading: false\n        });\n        const netID = await web3.eth.net.getId();\n        const netData = NFTAuction.networks[netID];\n\n        if (netData) {\n          this.setState({\n            loading: true\n          });\n          const NFTContract = new web3.eth.Contract(NFTAuction.abi, netData.address);\n          this.setState({\n            NFTContract\n          });\n          this.setState({\n            contractDetected: true\n          });\n          const NFTCount = await NFTContract.methods.NFTCounter().call();\n          this.setState({\n            NFTCount\n          });\n\n          for (let i = 1; i <= NFTCount; i++) {\n            const nft = await NFTContract.methods.allNFTs(i).call();\n            this.setState({\n              NFTs: [...this.state.NFTs, nft]\n            });\n            const auction = await NFTContract.methods.AuctionsOfNFT(i).call();\n            this.setState({\n              Auctions: [...this.state.Auctions, auction]\n            });\n          }\n\n          let NFTNumOfAccount = await NFTContract.methods.getTotalNumberOfTokensOwnedByAnAddress(this.state.accountAddress).call();\n          this.setState({\n            NFTNumOfAccount\n          });\n          this.setState({\n            loading: false\n          });\n        }\n      }\n    };\n\n    this.connectToMetamask = async () => {\n      await window.ethereum.enable();\n      this.setState({\n        metamaskConnected: true\n      });\n      window.location.reload();\n    };\n\n    this.state = {\n      accountAddress: \"\",\n      accountBalance: \"\",\n      NFTContract: null,\n      NFTCount: 0,\n      NFTs: [],\n      loading: true,\n      metamaskConnected: false,\n      contractDetected: false,\n      NFTNumOfAccount: 0,\n      nameIsUsed: false,\n      lastMintTime: null,\n      Auctions: [],\n      currentTime: null\n    };\n  }\n\n  componentDidMount() {\n    this.timerID = setInterval(() => this.tick(), 1000);\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.timerID);\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: !this.state.metamaskConnected ? /*#__PURE__*/_jsxDEV(Metamask, {\n        connectToMetamask: this.connectToMetamask\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 21\n      }, this) : !this.state.contractDetected ? /*#__PURE__*/_jsxDEV(NoContract, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 21\n      }, this) : this.state.loading ? /*#__PURE__*/_jsxDEV(Loading, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 21\n      }, this) : /*#__PURE__*/_jsxDEV(HashRouter, {\n        basename: \"/\",\n        children: [/*#__PURE__*/_jsxDEV(Navbar, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: \"/\",\n          exact: true,\n          render: () => /*#__PURE__*/_jsxDEV(Home, {\n            accountAddress: this.state.accountAddress,\n            accountBalance: this.state.accountBalance\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 142,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: \"/marketplace\",\n          exact: true,\n          render: () => /*#__PURE__*/_jsxDEV(Marketplace, {\n            accountAddress: this.state.accountAddress,\n            NFTs: this.state.NFTs,\n            NFTCount: this.state.NFTCount,\n            NFTContract: this.state.NFTContract,\n            Auctions: this.state.Auctions\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 152,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 148,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: \"/create\",\n          exact: true,\n          render: () => /*#__PURE__*/_jsxDEV(Create, {\n            accountAddress: this.state.accountAddress,\n            NFTContract: this.state.NFTContract\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 165,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 161,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: \"/my-tokens\",\n          exact: true,\n          render: () => /*#__PURE__*/_jsxDEV(MyTokens, {\n            accountAddress: this.state.accountAddress,\n            NFTs: this.state.NFTs,\n            NFTNumOfAccount: this.state.NFTNumOfAccount,\n            NFTContract: this.state.NFTContract,\n            Auctions: this.state.Auctions,\n            currentTime: this.state.currentTime\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 175,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 171,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: \"/queries\",\n          exact: true,\n          render: () => /*#__PURE__*/_jsxDEV(Queries, {\n            accountAddress: this.state.accountAddress,\n            NFTs: this.state.NFTs,\n            NFTCount: this.state.NFTCount,\n            NFTContract: this.state.NFTContract,\n            Auctions: this.state.Auctions\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 202,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 198,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["D:/Edgedownload/dacheng/去中心化NFT拍卖平台/src/App.js"],"names":["React","HashRouter","Route","Web3","Navbar","Home","Metamask","NoContract","Loading","Marketplace","Create","Queries","MyTokens","MyAuctions","NFTAuction","App","Component","constructor","props","componentWillMount","loadWeb3","loadBlockChain","tick","state","NFTContract","currentTime","methods","getTime","call","setState","window","ethereum","web3","currentProvider","alert","accounts","eth","getAccounts","length","metamaskConnected","loading","accountAddress","balance","getBalance","utils","fromWei","accountBalance","netID","net","getId","netData","networks","Contract","abi","address","contractDetected","NFTCount","NFTCounter","i","nft","allNFTs","NFTs","auction","AuctionsOfNFT","Auctions","NFTNumOfAccount","getTotalNumberOfTokensOwnedByAnAddress","connectToMetamask","enable","location","reload","nameIsUsed","lastMintTime","componentDidMount","timerID","setInterval","componentWillUnmount","clearInterval","render"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { HashRouter, Route } from \"react-router-dom\";\nimport './App.css';\nimport Web3 from \"web3\";\n\nimport Navbar from \"./components/Navbar/Navbar\";\nimport Home from \"./components/Home/Home\";\nimport Metamask from \"./components/Metamask\";\nimport NoContract from \"./components/NoContract\";\nimport Loading from \"./components/Loading/Loading\";\nimport Marketplace from \"./components/Markerplace/Marketplace\";\nimport Create from \"./components/Create/Create\";\nimport Queries from \"./components/Queries/Queries\";\nimport MyTokens from \"./components/MyTokens/MyTokens\"\nimport MyAuctions from \"./components/MyAuctions/MyAuctions\";\n\nimport NFTAuction from \"./build/contracts/NFTAuction.json\";\n\nclass App extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            accountAddress: \"\",\n            accountBalance: \"\",\n            NFTContract: null,\n            NFTCount: 0,\n            NFTs: [],\n            loading: true,\n            metamaskConnected: false,\n            contractDetected: false,\n            NFTNumOfAccount: 0,\n            nameIsUsed: false,\n            lastMintTime: null,\n            Auctions: [],\n            currentTime: null,\n        };\n    }\n\n    componentDidMount() {\n        this.timerID = setInterval(\n            () => this.tick(),\n            1000\n        );\n    }\n\n    componentWillMount = async () => {\n        await this.loadWeb3();\n        await this.loadBlockChain();\n    }\n\n    componentWillUnmount() {\n        clearInterval(this.timerID);\n    }\n\n    tick = async() => {\n        if (this.state.NFTContract) {\n            let currentTime = await this.state.NFTContract.methods.getTime().call();\n            // console.log(\"time:\", currentTime);\n            this.setState({currentTime});\n        }\n    }\n\n    loadWeb3 = async () => {\n        if (window.ethereum) {\n            window.web3 = new Web3(window.ethereum);\n        }\n        else if (window.web3) {\n            window.web3 = new Web3(window.web3.currentProvider);\n        }\n        else {\n            window.alert(\"Non-Ethereum browser detected. You should consider trying MetaMask.\");\n        }\n    }\n\n    loadBlockChain = async () => {\n        const web3 = window.web3;\n        const accounts = await web3.eth.getAccounts();\n\n        if (accounts.length === 0) \n            this.setState({metamaskConnected: false});\n        else {\n            this.setState({metamaskConnected: true});\n            this.setState({loading: true});\n            this.setState({accountAddress: accounts[0]});\n            \n            let balance = await web3.eth.getBalance(accounts[0]);\n            balance = web3.utils.fromWei(balance, \"ether\");\n            this.setState({accountBalance: balance});\n            this.setState({loading: false});\n\n            const netID = await web3.eth.net.getId();\n            const netData = NFTAuction.networks[netID];\n            if (netData) {\n                this.setState({loading: true});\n                const NFTContract = new web3.eth.Contract(\n                    NFTAuction.abi,\n                    netData.address\n                );\n                this.setState({NFTContract});\n                this.setState({contractDetected: true});\n                \n                const NFTCount = await NFTContract.methods.NFTCounter().call();\n                this.setState({NFTCount});\n\n                for (let i = 1; i <= NFTCount; i++) {\n                    const nft = await NFTContract.methods.allNFTs(i).call();\n                    this.setState({NFTs: [...this.state.NFTs, nft],});\n                    const auction = await NFTContract.methods.AuctionsOfNFT(i).call();\n                    this.setState({Auctions: [...this.state.Auctions, auction],})\n                }\n\n                let NFTNumOfAccount = await NFTContract.methods.getTotalNumberOfTokensOwnedByAnAddress(this.state.accountAddress).call();\n                this.setState({NFTNumOfAccount});\n                this.setState({loading: false});\n            }\n        }\n    }\n\n    connectToMetamask = async () => {\n        await window.ethereum.enable();\n        this.setState({metamaskConnected: true});\n        window.location.reload();\n    }\n\n    render() {\n        return (\n            <div>\n            {\n                !this.state.metamaskConnected ? (\n                    <Metamask connectToMetamask={this.connectToMetamask}/>\n                ) : ! this.state.contractDetected ? (\n                    <NoContract/>\n                ) : this.state.loading ? (\n                    <Loading/>\n                ) : (\n                    <HashRouter basename=\"/\">\n                    <Navbar />\n                    <Route\n                        path=\"/\"\n                        exact\n                        render={() => (\n                            <Home\n                                accountAddress={this.state.accountAddress}\n                                accountBalance={this.state.accountBalance}\n                            />\n                        )}\n                    />\n                    <Route\n                        path=\"/marketplace\"\n                        exact\n                        render={() => (\n                            <Marketplace \n                                accountAddress={this.state.accountAddress}\n                                NFTs={this.state.NFTs}\n                                NFTCount={this.state.NFTCount}\n                                NFTContract={this.state.NFTContract}\n                                Auctions={this.state.Auctions}\n                            />\n                        )}\n                    />\n                    <Route\n                        path=\"/create\"\n                        exact\n                        render={() => (\n                            <Create\n                                accountAddress={this.state.accountAddress}\n                                NFTContract={this.state.NFTContract}\n                            />\n                        )}\n                    />\n                    <Route\n                        path=\"/my-tokens\"\n                        exact\n                        render={() => (\n                            <MyTokens\n                                accountAddress={this.state.accountAddress}\n                                NFTs={this.state.NFTs}\n                                NFTNumOfAccount={this.state.NFTNumOfAccount}\n                                NFTContract={this.state.NFTContract}\n                                Auctions={this.state.Auctions}\n                                currentTime={this.state.currentTime}\n                            />\n                        )}\n                    />\n                    {/* <Route\n                        path=\"/my-auctions\"\n                        exact\n                        render={() => (\n                            <MyAuctions\n                                accountAddress={this.state.accountAddress}\n                                NFTs={this.state.NFTs}\n                                NFTCount={this.state.NFTCount}\n                                NFTContract={this.state.NFTContract}\n                                Auctions={this.state.Auctions}\n                            />\n                        )}\n                    /> */}\n                    <Route\n                        path=\"/queries\"\n                        exact\n                        render={() => (\n                            <Queries\n                                accountAddress={this.state.accountAddress}\n                                NFTs={this.state.NFTs}\n                                NFTCount={this.state.NFTCount}\n                                NFTContract={this.state.NFTContract}\n                                Auctions={this.state.Auctions}\n                            />\n                        )}\n                    />\n                </HashRouter>\n                )\n            }\n            </div>\n        )\n    }\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}