{"ast":null,"code":"var _jsxFileName = \"D:\\\\Edgedownload\\\\\\u6284\\u4F5C\\u4E1A\\\\Cryptoplat-master\\\\src\\\\components\\\\Create\\\\Create.jsx\";\nimport React from 'react';\nimport { create } from 'ipfs-http-client';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ipfs = create({\n  host: \"ipfs.infura.io\",\n  port: 5001,\n  protocol: \"https\"\n});\n\nclass Create extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.chooseFile = event => {\n      event.preventDefault();\n      let file = event.target.files[0];\n      let reader = new window.FileReader();\n      reader.readAsArrayBuffer(file);\n\n      reader.onloadend = () => {\n        this.setState({\n          buffer: Buffer(reader.result)\n        });\n        console.log('buffer', this.state.buffer);\n      };\n    };\n\n    this.onSubmit = async event => {\n      event.preventDefault();\n      console.log(\"Submitting file to IPFS\");\n      let result = await ipfs.add(this.state.buffer);\n      console.log('Ipfs result', result);\n      let tokenURI = `https://ipfs.infura.io/ipfs/${result.path}`;\n      console.log(tokenURI);\n      this.setState({\n        tokenURI\n      });\n      this.props.NFTContract.methods.mintNFT(this.state.NFTName, tokenURI, 0).send({\n        from: this.props.accountAddress,\n        gas: '3000000'\n      });\n      console.log(\"Name:\" + this.state.NFTName);\n    };\n\n    this.state = {\n      NFTName: \"\",\n      tokenURI: '',\n      buffer: null //Data to be sent to ipfs\n\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"jumbotron\",\n        children: /*#__PURE__*/_jsxDEV(\"h1\", {\n          className: \"display-5\",\n          children: \"Create your NFT\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"p-4 mt-1 border\",\n        children: /*#__PURE__*/_jsxDEV(\"form\", {\n          onSubmit: this.onSubmit,\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"file\",\n            onChange: this.chooseFile\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 54,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            required: true,\n            type: \"text\",\n            value: this.state.NFTName,\n            className: \"form-control\",\n            placeholder: \"Enter Your NFT's Name\",\n            onChange: e => this.setState({\n              NFTName: e.target.value\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 55,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"mt-3 btn btn-outline-primary\",\n            type: \"submit\",\n            children: \"Submit\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 65,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default Create;","map":{"version":3,"sources":["D:/Edgedownload/抄作业/Cryptoplat-master/src/components/Create/Create.jsx"],"names":["React","create","ipfs","host","port","protocol","Create","Component","constructor","props","chooseFile","event","preventDefault","file","target","files","reader","window","FileReader","readAsArrayBuffer","onloadend","setState","buffer","Buffer","result","console","log","state","onSubmit","add","tokenURI","path","NFTContract","methods","mintNFT","NFTName","send","from","accountAddress","gas","render","e","value"],"mappings":"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","sourcesContent":["import React from 'react';\nimport {create} from 'ipfs-http-client';\n\nconst ipfs = create({\n    host: \"ipfs.infura.io\",\n    port: 5001,\n    protocol: \"https\",\n});\n\nclass Create extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            NFTName: \"\",\n            tokenURI: '',\n            buffer: null,  //Data to be sent to ipfs\n        }\n    }\n\n    chooseFile = (event) => {\n        event.preventDefault();\n        let file = event.target.files[0];\n        let reader = new window.FileReader();\n        reader.readAsArrayBuffer(file);\n        reader.onloadend = () => {\n            this.setState({buffer: Buffer(reader.result)});\n            console.log('buffer', this.state.buffer);\n        }\n    }\n\n    onSubmit = async(event) => {\n        event.preventDefault();\n        console.log(\"Submitting file to IPFS\");\n            \n        let result = await ipfs.add(this.state.buffer);\n        \n        console.log('Ipfs result', result);\n        let tokenURI = `https://ipfs.infura.io/ipfs/${result.path}`;\n        console.log(tokenURI);\n        this.setState({tokenURI});\n        \n        this.props.NFTContract.methods.mintNFT(this.state.NFTName, tokenURI, 0).send({from: this.props.accountAddress, gas: '3000000'});\n        console.log(\"Name:\"+this.state.NFTName);\n    }\n\n    render() {\n        return (\n            <div>\n                <div className=\"jumbotron\">\n                    <h1 className=\"display-5\">Create your NFT</h1>\n                </div>\n                <div className=\"p-4 mt-1 border\">\n                    <form onSubmit={this.onSubmit}>\n                        <input type=\"file\" onChange={this.chooseFile}/>\n                        <input\n                          required\n                          type=\"text\"\n                          value={this.state.NFTName}\n                          className=\"form-control\"\n                          placeholder=\"Enter Your NFT's Name\"\n                          onChange={(e) =>\n                            this.setState({ NFTName: e.target.value })\n                          }\n                        />\n                        <button className=\"mt-3 btn btn-outline-primary\" type=\"submit\">\n                            Submit\n                        </button>\n                    </form>\n                </div>\n            </div>\n        )\n    };\n}\n\nexport default Create;"]},"metadata":{},"sourceType":"module"}