{"ast":null,"code":"var _jsxFileName = \"D:\\\\Edgedownload\\\\dacheng\\\\Cryptoplat-master\\\\src\\\\components\\\\MyTokens\\\\MyTokens.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport MyTokenInfo from \"./MyTokenInfo\";\nimport Loading from \"../Loading/Loading\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst MyTokens = ({\n  accountAddress,\n  NFTs,\n  NFTNumOfAccount,\n  NFTContract,\n  Auctions,\n  currentTime\n}) => {\n  _s();\n\n  const [loading, setLoading] = useState(false);\n  const [myNFTs, setMyNFTs] = useState([]);\n  useEffect(() => {\n    if (NFTs.length !== 0) {\n      if (NFTs[0].metaData !== undefined) {\n        setLoading(loading);\n      } else {\n        setLoading(false);\n      }\n    }\n\n    const myNFTs = NFTs.filter(NFT => NFT.currentOwner === accountAddress);\n    setMyNFTs(myNFTs);\n  }, [NFTs]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      class: \"container\",\n      children: /*#__PURE__*/_jsxDEV(\"h5\", {\n        children: \"\\u6211\\u6240\\u6301\\u6709\\u7684\\u7684NFT\\u5982\\u4E0B\\uFF1A\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"d-flex flex-wrap mb-2\",\n      children: myNFTs.map(NFT => {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"w-30 p-4 mt-1 border\",\n          children: [/*#__PURE__*/_jsxDEV(\"img\", {\n            src: NFT.tokenURI,\n            id: \"preview_img\",\n            width: \"100px\",\n            height: \"100px\",\n            alt: \"\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 44,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(MyTokenInfo, {\n            NFT: NFT,\n            accountAddress: accountAddress,\n            NFTContract: NFTContract,\n            Auction: Auctions[parseInt(NFT.tokenID) - 1],\n            currentTime: currentTime\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 45,\n            columnNumber: 19\n          }, this)]\n        }, NFT.tokenID, true, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 15\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 7\n  }, this);\n};\n\n_s(MyTokens, \"y1MrQOxJoZXgRYMWG4KfzLJ+8Qs=\");\n\n_c = MyTokens;\nexport default MyTokens;\n\nvar _c;\n\n$RefreshReg$(_c, \"MyTokens\");","map":{"version":3,"sources":["D:/Edgedownload/dacheng/Cryptoplat-master/src/components/MyTokens/MyTokens.jsx"],"names":["React","useState","useEffect","MyTokenInfo","Loading","MyTokens","accountAddress","NFTs","NFTNumOfAccount","NFTContract","Auctions","currentTime","loading","setLoading","myNFTs","setMyNFTs","length","metaData","undefined","filter","NFT","currentOwner","map","tokenURI","parseInt","tokenID"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,WAAP,MAAwB,eAAxB;AACA,OAAOC,OAAP,MAAoB,oBAApB;;;AAEA,MAAMC,QAAQ,GAAG,CAAC;AACdC,EAAAA,cADc;AAEdC,EAAAA,IAFc;AAGdC,EAAAA,eAHc;AAIdC,EAAAA,WAJc;AAKdC,EAAAA,QALc;AAMdC,EAAAA;AANc,CAAD,KAOT;AAAA;;AACJ,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBZ,QAAQ,CAAC,KAAD,CAAtC;AACA,QAAM,CAACa,MAAD,EAASC,SAAT,IAAsBd,QAAQ,CAAC,EAAD,CAApC;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIK,IAAI,CAACS,MAAL,KAAgB,CAApB,EAAuB;AACrB,UAAIT,IAAI,CAAC,CAAD,CAAJ,CAAQU,QAAR,KAAqBC,SAAzB,EAAoC;AAClCL,QAAAA,UAAU,CAACD,OAAD,CAAV;AACD,OAFD,MAEO;AACLC,QAAAA,UAAU,CAAC,KAAD,CAAV;AACD;AACF;;AACD,UAAMC,MAAM,GAAGP,IAAI,CAACY,MAAL,CACZC,GAAD,IAASA,GAAG,CAACC,YAAJ,KAAqBf,cADjB,CAAf;AAGAS,IAAAA,SAAS,CAACD,MAAD,CAAT;AACD,GAZQ,EAYN,CAACP,IAAD,CAZM,CAAT;AAcA,sBACE;AAAA,4BACE;AAAK,MAAA,KAAK,EAAC,WAAX;AAAA,6BACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,YADF,eAME;AAAK,MAAA,SAAS,EAAC,uBAAf;AAAA,gBACGO,MAAM,CAACQ,GAAP,CAAYF,GAAD,IAAS;AACnB,4BACE;AAEE,UAAA,SAAS,EAAC,sBAFZ;AAAA,kCAII;AAAK,YAAA,GAAG,EAAEA,GAAG,CAACG,QAAd;AAAwB,YAAA,EAAE,EAAC,aAA3B;AAAyC,YAAA,KAAK,EAAC,OAA/C;AAAuD,YAAA,MAAM,EAAC,OAA9D;AAAsE,YAAA,GAAG,EAAC;AAA1E;AAAA;AAAA;AAAA;AAAA,kBAJJ,eAKI,QAAC,WAAD;AACE,YAAA,GAAG,EAAEH,GADP;AAEE,YAAA,cAAc,EAAEd,cAFlB;AAGE,YAAA,WAAW,EAAEG,WAHf;AAIE,YAAA,OAAO,EAAEC,QAAQ,CAACc,QAAQ,CAACJ,GAAG,CAACK,OAAL,CAAR,GAAsB,CAAvB,CAJnB;AAKE,YAAA,WAAW,EAAEd;AALf;AAAA;AAAA;AAAA;AAAA,kBALJ;AAAA,WACOS,GAAG,CAACK,OADX;AAAA;AAAA;AAAA;AAAA,gBADF;AAeD,OAhBA;AADH;AAAA;AAAA;AAAA;AAAA,YANF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AA4BD,CArDH;;GAAMpB,Q;;KAAAA,Q;AAuDJ,eAAeA,QAAf","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport MyTokenInfo from \"./MyTokenInfo\";\nimport Loading from \"../Loading/Loading\";\n\nconst MyTokens = ({\n    accountAddress,\n    NFTs,\n    NFTNumOfAccount,\n    NFTContract,\n    Auctions,\n    currentTime,\n  }) => {\n    const [loading, setLoading] = useState(false);\n    const [myNFTs, setMyNFTs] = useState([]);\n  \n    useEffect(() => {\n      if (NFTs.length !== 0) {\n        if (NFTs[0].metaData !== undefined) {\n          setLoading(loading);\n        } else {\n          setLoading(false);\n        }\n      }\n      const myNFTs = NFTs.filter(\n        (NFT) => NFT.currentOwner === accountAddress\n      );\n      setMyNFTs(myNFTs);\n    }, [NFTs]);\n  \n    return (\n      <div>\n        <div class=\"container\">\n            <h5>\n              我所持有的的NFT如下：\n            </h5>\n        </div>\n        <div className=\"d-flex flex-wrap mb-2\">\n          {myNFTs.map((NFT) => {\n            return (\n              <div\n                key={NFT.tokenID}\n                className=\"w-30 p-4 mt-1 border\"\n              >\n                  <img src={NFT.tokenURI} id=\"preview_img\" width=\"100px\" height=\"100px\" alt=\"\"/>\n                  <MyTokenInfo\n                    NFT={NFT}\n                    accountAddress={accountAddress}\n                    NFTContract={NFTContract}\n                    Auction={Auctions[parseInt(NFT.tokenID)-1]}\n                    currentTime={currentTime}\n                  />\n              </div>\n            );\n          })}\n        </div>\n      </div>\n    );\n  };\n  \n  export default MyTokens;"]},"metadata":{},"sourceType":"module"}