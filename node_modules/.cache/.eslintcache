[{"D:\\Edgedownload\\dacheng\\去中心化NFT拍卖平台\\src\\index.js":"1","D:\\Edgedownload\\dacheng\\去中心化NFT拍卖平台\\src\\App.js":"2","D:\\Edgedownload\\dacheng\\去中心化NFT拍卖平台\\src\\serviceWorker.js":"3","D:\\Edgedownload\\dacheng\\去中心化NFT拍卖平台\\src\\components\\Navbar\\Navbar.jsx":"4","D:\\Edgedownload\\dacheng\\去中心化NFT拍卖平台\\src\\components\\NoContract.jsx":"5","D:\\Edgedownload\\dacheng\\去中心化NFT拍卖平台\\src\\components\\Markerplace\\Marketplace.jsx":"6","D:\\Edgedownload\\dacheng\\去中心化NFT拍卖平台\\src\\components\\Metamask.jsx":"7","D:\\Edgedownload\\dacheng\\去中心化NFT拍卖平台\\src\\components\\Queries\\Queries.jsx":"8","D:\\Edgedownload\\dacheng\\去中心化NFT拍卖平台\\src\\components\\Create\\Create.jsx":"9","D:\\Edgedownload\\dacheng\\去中心化NFT拍卖平台\\src\\components\\MyAuctions\\MyAuctions.jsx":"10","D:\\Edgedownload\\dacheng\\去中心化NFT拍卖平台\\src\\components\\Home\\Home.jsx":"11","D:\\Edgedownload\\dacheng\\去中心化NFT拍卖平台\\src\\components\\Loading\\Loading.jsx":"12","D:\\Edgedownload\\dacheng\\去中心化NFT拍卖平台\\src\\components\\MyTokens\\MyTokens.jsx":"13","D:\\Edgedownload\\dacheng\\去中心化NFT拍卖平台\\src\\components\\Markerplace\\NFTinfo.jsx":"14","D:\\Edgedownload\\dacheng\\去中心化NFT拍卖平台\\src\\components\\MyTokens\\MyTokenInfo.jsx":"15"},{"size":502,"mtime":1635861031000,"results":"16","hashOfConfig":"17"},{"size":7982,"mtime":1635861031000,"results":"18","hashOfConfig":"17"},{"size":5341,"mtime":1635861031000,"results":"19","hashOfConfig":"17"},{"size":849,"mtime":1636134681706,"results":"20","hashOfConfig":"17"},{"size":190,"mtime":1636140367251,"results":"21","hashOfConfig":"17"},{"size":1556,"mtime":1636137303494,"results":"22","hashOfConfig":"17"},{"size":340,"mtime":1636135017154,"results":"23","hashOfConfig":"17"},{"size":2637,"mtime":1636137789985,"results":"24","hashOfConfig":"17"},{"size":2384,"mtime":1636132599280,"results":"25","hashOfConfig":"17"},{"size":700,"mtime":1635861031000,"results":"26","hashOfConfig":"17"},{"size":802,"mtime":1636124876968,"results":"27","hashOfConfig":"17"},{"size":198,"mtime":1635861031000,"results":"28","hashOfConfig":"17"},{"size":1577,"mtime":1636136990574,"results":"29","hashOfConfig":"17"},{"size":4492,"mtime":1636137289978,"results":"30","hashOfConfig":"17"},{"size":2839,"mtime":1636140235322,"results":"31","hashOfConfig":"17"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},"zon3oz",{"filePath":"35","messages":"36","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"34"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"34"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"45","messages":"46","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"34"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"34"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"34"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"34"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"34"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70"},"D:\\Edgedownload\\dacheng\\去中心化NFT拍卖平台\\src\\index.js",[],["71","72"],"D:\\Edgedownload\\dacheng\\去中心化NFT拍卖平台\\src\\App.js",["73"],"import React from \"react\";\nimport { HashRouter, Route } from \"react-router-dom\";\nimport './App.css';\nimport Web3 from \"web3\";\n\nimport Navbar from \"./components/Navbar/Navbar\";\nimport Home from \"./components/Home/Home\";\nimport Metamask from \"./components/Metamask\";\nimport NoContract from \"./components/NoContract\";\nimport Loading from \"./components/Loading/Loading\";\nimport Marketplace from \"./components/Markerplace/Marketplace\";\nimport Create from \"./components/Create/Create\";\nimport Queries from \"./components/Queries/Queries\";\nimport MyTokens from \"./components/MyTokens/MyTokens\"\nimport MyAuctions from \"./components/MyAuctions/MyAuctions\";\n\nimport NFTAuction from \"./build/contracts/NFTAuction.json\";\n\nclass App extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            accountAddress: \"\",\n            accountBalance: \"\",\n            NFTContract: null,\n            NFTCount: 0,\n            NFTs: [],\n            loading: true,\n            metamaskConnected: false,\n            contractDetected: false,\n            NFTNumOfAccount: 0,\n            nameIsUsed: false,\n            lastMintTime: null,\n            Auctions: [],\n            currentTime: null,\n        };\n    }\n\n    componentDidMount() {\n        this.timerID = setInterval(\n            () => this.tick(),\n            1000\n        );\n    }\n\n    componentWillMount = async () => {\n        await this.loadWeb3();\n        await this.loadBlockChain();\n    }\n\n    componentWillUnmount() {\n        clearInterval(this.timerID);\n    }\n\n    tick = async() => {\n        if (this.state.NFTContract) {\n            let currentTime = await this.state.NFTContract.methods.getTime().call();\n            // console.log(\"time:\", currentTime);\n            this.setState({currentTime});\n        }\n    }\n\n    loadWeb3 = async () => {\n        if (window.ethereum) {\n            window.web3 = new Web3(window.ethereum);\n        }\n        else if (window.web3) {\n            window.web3 = new Web3(window.web3.currentProvider);\n        }\n        else {\n            window.alert(\"Non-Ethereum browser detected. You should consider trying MetaMask.\");\n        }\n    }\n\n    loadBlockChain = async () => {\n        const web3 = window.web3;\n        const accounts = await web3.eth.getAccounts();\n\n        if (accounts.length === 0) \n            this.setState({metamaskConnected: false});\n        else {\n            this.setState({metamaskConnected: true});\n            this.setState({loading: true});\n            this.setState({accountAddress: accounts[0]});\n            \n            let balance = await web3.eth.getBalance(accounts[0]);\n            balance = web3.utils.fromWei(balance, \"ether\");\n            this.setState({accountBalance: balance});\n            this.setState({loading: false});\n\n            const netID = await web3.eth.net.getId();\n            const netData = NFTAuction.networks[netID];\n            if (netData) {\n                this.setState({loading: true});\n                const NFTContract = new web3.eth.Contract(\n                    NFTAuction.abi,\n                    netData.address\n                );\n                this.setState({NFTContract});\n                this.setState({contractDetected: true});\n                \n                const NFTCount = await NFTContract.methods.NFTCounter().call();\n                this.setState({NFTCount});\n\n                for (let i = 1; i <= NFTCount; i++) {\n                    const nft = await NFTContract.methods.allNFTs(i).call();\n                    this.setState({NFTs: [...this.state.NFTs, nft],});\n                    const auction = await NFTContract.methods.AuctionsOfNFT(i).call();\n                    this.setState({Auctions: [...this.state.Auctions, auction],})\n                }\n\n                let NFTNumOfAccount = await NFTContract.methods.getTotalNumberOfTokensOwnedByAnAddress(this.state.accountAddress).call();\n                this.setState({NFTNumOfAccount});\n                this.setState({loading: false});\n            }\n        }\n    }\n\n    connectToMetamask = async () => {\n        await window.ethereum.enable();\n        this.setState({metamaskConnected: true});\n        window.location.reload();\n    }\n\n    render() {\n        return (\n            <div>\n            {\n                !this.state.metamaskConnected ? (\n                    <Metamask connectToMetamask={this.connectToMetamask}/>\n                ) : ! this.state.contractDetected ? (\n                    <NoContract/>\n                ) : this.state.loading ? (\n                    <Loading/>\n                ) : (\n                    <HashRouter basename=\"/\">\n                    <Navbar />\n                    <Route\n                        path=\"/\"\n                        exact\n                        render={() => (\n                            <Home\n                                accountAddress={this.state.accountAddress}\n                                accountBalance={this.state.accountBalance}\n                            />\n                        )}\n                    />\n                    <Route\n                        path=\"/marketplace\"\n                        exact\n                        render={() => (\n                            <Marketplace \n                                accountAddress={this.state.accountAddress}\n                                NFTs={this.state.NFTs}\n                                NFTCount={this.state.NFTCount}\n                                NFTContract={this.state.NFTContract}\n                                Auctions={this.state.Auctions}\n                            />\n                        )}\n                    />\n                    <Route\n                        path=\"/create\"\n                        exact\n                        render={() => (\n                            <Create\n                                accountAddress={this.state.accountAddress}\n                                NFTContract={this.state.NFTContract}\n                            />\n                        )}\n                    />\n                    <Route\n                        path=\"/my-tokens\"\n                        exact\n                        render={() => (\n                            <MyTokens\n                                accountAddress={this.state.accountAddress}\n                                NFTs={this.state.NFTs}\n                                NFTNumOfAccount={this.state.NFTNumOfAccount}\n                                NFTContract={this.state.NFTContract}\n                                Auctions={this.state.Auctions}\n                                currentTime={this.state.currentTime}\n                            />\n                        )}\n                    />\n                    {/* <Route\n                        path=\"/my-auctions\"\n                        exact\n                        render={() => (\n                            <MyAuctions\n                                accountAddress={this.state.accountAddress}\n                                NFTs={this.state.NFTs}\n                                NFTCount={this.state.NFTCount}\n                                NFTContract={this.state.NFTContract}\n                                Auctions={this.state.Auctions}\n                            />\n                        )}\n                    /> */}\n                    <Route\n                        path=\"/queries\"\n                        exact\n                        render={() => (\n                            <Queries\n                                accountAddress={this.state.accountAddress}\n                                NFTs={this.state.NFTs}\n                                NFTCount={this.state.NFTCount}\n                                NFTContract={this.state.NFTContract}\n                                Auctions={this.state.Auctions}\n                            />\n                        )}\n                    />\n                </HashRouter>\n                )\n            }\n            </div>\n        )\n    }\n}\n\nexport default App;","D:\\Edgedownload\\dacheng\\去中心化NFT拍卖平台\\src\\serviceWorker.js",[],"D:\\Edgedownload\\dacheng\\去中心化NFT拍卖平台\\src\\components\\Navbar\\Navbar.jsx",["74"],"import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\n\nconst Navbar = () => {\n  return (\n    <nav class=\"navbar navbar-expand-lg\" role=\"navigation\">\n    <div class=\"container\">\n    <div class=\"navbar-header\">\n        <a class=\"navbar-brand\" href=\"/\">首页</a>\n    </div>\n    <div>\n        <ul class=\"nav navbar-nav\">\n            <li class=\"active\"><a href=\"http://localhost:3000/marketplace#/marketplace\">&emsp;拍卖市场</a></li>\n            <li class=\"active\"><a href=\"http://localhost:3000/marketplace#/create\">&emsp;铸造NFT</a></li>\n            <li class=\"active\"><a href=\"http://localhost:3000/marketplace#/my-tokens\">&emsp;我的NFT</a></li>\n            <li class=\"active\"><a href=\"http://localhost:3000/marketplace#/queries\">&emsp;查询</a></li>\n        </ul>\n    </div>\n    </div>\n</nav>\n  );\n};\n\nexport default Navbar;\n","D:\\Edgedownload\\dacheng\\去中心化NFT拍卖平台\\src\\components\\NoContract.jsx",[],"D:\\Edgedownload\\dacheng\\去中心化NFT拍卖平台\\src\\components\\Markerplace\\Marketplace.jsx",["75","76"],"import React, { useState, useEffect } from \"react\";\nimport Loading from \"../Loading/Loading\";\nimport NFTinfo from \"./NFTinfo\";\n\nconst Marketplace = ({\n    NFTs,\n    accountAddress,\n    NFTCount,\n    NFTContract,\n    Auctions,\n}) => {\n    const [loading, setLoading] = useState(false);\n\n    useEffect(() => {\n        if (NFTs.length !== 0) {\n            if (NFTs[0].metaData !== undefined) {\n                setLoading(loading);\n            }\n            else {\n                setLoading(false);\n            }\n        }\n    }, [NFTs]);\n\n    return (\n        <div>\n            <div class=\"container\">\n                <div>\n                    <h5>当前在售NFT如下：</h5>\n                </div>\n            </div>\n            <div className=\"d-flex flex-wrap mb-2\">\n                {NFTs.map((NFT) => {\n                    return (\n                        <div\n                            key={NFT.tokenID}\n                            className=\"w-30 p-2 mt-1 border\"\n                        >\n                            <img src={NFT.tokenURI} id=\"preview_img\" width=\"100px\" height=\"100px\" alt=\"\"/>\n                            <NFTinfo\n                                NFT={NFT}\n                                accountAddress={accountAddress}\n                                NFTContract={NFTContract}\n                                Auction={Auctions[parseInt(NFT.tokenID)-1]}\n                            />\n                        </div>\n                    )\n                })}\n            </div>\n        </div>\n    )\n}\n\nexport default Marketplace;","D:\\Edgedownload\\dacheng\\去中心化NFT拍卖平台\\src\\components\\Metamask.jsx",[],"D:\\Edgedownload\\dacheng\\去中心化NFT拍卖平台\\src\\components\\Queries\\Queries.jsx",["77","78","79","80"],"import React, { useState } from \"react\";\n\nconst Queries = (props) => {\n  const [tokenIdForOwner, setTokenIdForOwner] = useState(\"\");\n  const [tokenOwner, setTokenOwner] = useState(\"\");\n  const [tokenIdForOwnerNotFound, setTokenIdForOwnerNotFound] = useState(false);\n\n  const [tokenIdForMetadata, setTokenIdForMetadata] = useState(\"\");\n  const [tokenMetadata, setTokenMetadata] = useState(\"\");\n  const [tokenMetadataLink, setTokenMetadataLink] = useState(\"\");\n  const [tokenIdForMetadataNotFound, setTokenIdForMetadataNotFound] = useState(false);\n\n  const getTokenOwner = async (e) => {\n    e.preventDefault();\n    try {\n      const owner = await props.NFTContract.methods.getTokenOwner(tokenIdForOwner).call();\n      setTokenOwner(owner);\n      setTimeout(() => {\n        setTokenOwner(\"\");\n        setTokenIdForOwner(\"\");\n      }, 5000);\n    } catch (e) {\n      setTokenIdForOwnerNotFound(true);\n      setTokenIdForOwner(\"\");\n    }\n  };\n\n  const getTokenMetadata = async (e) => {\n    e.preventDefault();\n    try {\n      const metadata = await props.NFTContract.methods.getTokenMetaData(tokenIdForMetadata).call();\n      setTokenMetadata(metadata.substr(0, 60) + \"...\" + metadata.slice(metadata.length - 5));\n      setTokenMetadataLink(metadata);\n      setTimeout(() => {\n        setTokenMetadata(\"\");\n        setTokenIdForMetadata(\"\");\n      }, 5000);\n    } catch (e) {\n      setTokenIdForMetadataNotFound(true);\n      setTokenIdForMetadata(\"\");\n    }\n  };\n\n  return (\n    <div>\n      <div className=\"p-4 mt-1 border\">\n        <div className=\"row\">\n          <div className=\"col-md-5\">\n            <h5>查询NFT所属权流转信息</h5>\n            <form onSubmit={getTokenOwner}>\n              <div className=\"form-group\">\n                <input\n                  required\n                  type=\"text\"\n                  value={tokenIdForOwner}\n                  placeholder=\"请输入要查询的NFT的序号\"\n                  onChange={(e) => setTokenIdForOwner(e.target.value)}\n                />\n              </div>\n              <button type=\"submit\">\n                查询\n              </button>\n              {tokenIdForOwnerNotFound ? (\n                <div className=\"alert alert-danger alert-dissmissible mt-4\">\n                  <button type=\"button\" className=\"close\" data-dismiss=\"alert\">\n                    <span>&times;</span>\n                  </button>\n                  <strong>该序号不存在</strong>\n                </div>\n              ) : null}\n            </form>\n            <p className=\"mt-4\">{tokenOwner}</p>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Queries;\n","D:\\Edgedownload\\dacheng\\去中心化NFT拍卖平台\\src\\components\\Create\\Create.jsx",[],"D:\\Edgedownload\\dacheng\\去中心化NFT拍卖平台\\src\\components\\MyAuctions\\MyAuctions.jsx",["81","82"],"import React, { useState, useEffect } from \"react\";\n\nclass MyAuctions extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            attendAuctions: [],\n            attendAuctionsNum: 5,\n        };\n    }\n\n    componentWillMount = async () => {\n        let attendAuctionsNum = await this.props.NFTContract.methods.attendAuctionsNum(this.props.accountAddress).call();\n        this.setState({attendAuctionsNum});\n        console.log(\"mount\");\n    }\n\n    componentDidMount() {\n    }\n\n    render() {\n        console.log(\"attendAuctionsNum: \", this.state.attendAuctionsNum);\n        return (\n            <div></div>\n        )\n    }\n}\n\nexport default MyAuctions;","D:\\Edgedownload\\dacheng\\去中心化NFT拍卖平台\\src\\components\\Home\\Home.jsx",[],"D:\\Edgedownload\\dacheng\\去中心化NFT拍卖平台\\src\\components\\Loading\\Loading.jsx",[],"D:\\Edgedownload\\dacheng\\去中心化NFT拍卖平台\\src\\components\\MyTokens\\MyTokens.jsx",["83","84"],"import React, { useState, useEffect } from \"react\";\nimport MyTokenInfo from \"./MyTokenInfo\";\nimport Loading from \"../Loading/Loading\";\n\nconst MyTokens = ({\n    accountAddress,\n    NFTs,\n    NFTNumOfAccount,\n    NFTContract,\n    Auctions,\n    currentTime,\n  }) => {\n    const [loading, setLoading] = useState(false);\n    const [myNFTs, setMyNFTs] = useState([]);\n  \n    useEffect(() => {\n      if (NFTs.length !== 0) {\n        if (NFTs[0].metaData !== undefined) {\n          setLoading(loading);\n        } else {\n          setLoading(false);\n        }\n      }\n      const myNFTs = NFTs.filter(\n        (NFT) => NFT.currentOwner === accountAddress\n      );\n      setMyNFTs(myNFTs);\n    }, [NFTs]);\n  \n    return (\n      <div>\n        <div class=\"container\">\n            <h5>\n              我所持有的的NFT如下：\n            </h5>\n        </div>\n        <div className=\"d-flex flex-wrap mb-2\">\n          {myNFTs.map((NFT) => {\n            return (\n              <div\n                key={NFT.tokenID}\n                className=\"w-30 p-4 mt-1 border\"\n              >\n                  <img src={NFT.tokenURI} id=\"preview_img\" width=\"100px\" height=\"100px\" alt=\"\"/>\n                  <MyTokenInfo\n                    NFT={NFT}\n                    accountAddress={accountAddress}\n                    NFTContract={NFTContract}\n                    Auction={Auctions[parseInt(NFT.tokenID)-1]}\n                    currentTime={currentTime}\n                  />\n              </div>\n            );\n          })}\n        </div>\n      </div>\n    );\n  };\n  \n  export default MyTokens;","D:\\Edgedownload\\dacheng\\去中心化NFT拍卖平台\\src\\components\\Markerplace\\NFTinfo.jsx",["85"],"import React from \"react\";\n\nclass NFTinfo extends React.Component {\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n        return (\n            <div key={this.props.NFT.tokenID} className=\"mt-4\">\n                <p>\n                    <span className=\"font-weight-bold\">NFT序号</span> :{\" \"}\n                    {this.props.NFT.tokenID}\n                </p>\n                <p>\n                    <span className=\"font-weight-bold\">代号</span> :{\" \"}\n                    {this.props.NFT.tokenName}\n                </p>\n                <p>\n                    <span className=\"font-weight-bold\">铸造者</span> :{\" \"}\n                    {this.props.NFT.mintedBy}\n                </p>\n                <p>\n                    <span className=\"font-weight-bold\">现持有人</span> :{\" \"}\n                    {this.props.NFT.currentOwner}\n                </p>\n                <p>\n                    <span className=\"font-weight-bold\">当前价格</span> :{\" \"}\n                    {window.web3.utils.fromWei(this.props.NFT.price,\"Ether\")} ETH\n                </p>\n                {\n                    this.props.accountAddress === this.props.NFT.currentOwner ? (\n                        !this.props.NFT.onSale ? (\n                            <button\n                                onClick={ () => {\n                                    let minBid = prompt(\"起拍价\");\n                                    let duration = prompt(\"拍卖时长\");\n                                    this.props.NFTContract.methods.beginAuction(this.props.NFT.tokenID, minBid, duration).send({ from: this.props.accountAddress, gas: '3000000'}).on(\"confirmation\", () => {\n                                        window.location.reload();\n                                    });\n                                }}\n                            >\n                                拍卖\n                            </button>\n                        ) : (\n                            <p>\n                                <span className=\"font-weight-bold\">结束时间</span> :{\" \"}\n                                {this.props.Auction.endTime}\n                            </p>\n                        )\n                    ) : (\n                        this.props.NFT.onSale ? (\n                            !this.props.Auction.ended ? (\n                                <div>\n                                <p>\n                                    <span className=\"font-weight-bold\">最高出价</span> :{\" \"}\n                                    {this.props.Auction.highestBid}\n                                </p>\n                                <botton\n                                    onClick={ () => {\n                                        let bid = prompt(\"请输入你的竞拍价\");\n                                        this.props.NFTContract.methods.increaseBid(this.props.NFT.tokenID, bid).send({ from: this.props.accountAddress, gas: '3000000'});\n                                      }}\n                                >\n                                    出价\n                                </botton>\n                                </div>\n                            ) : (\n                                !this.props.Auction.claimed ? (\n                                    this.props.accountAddress === this.props.Auction.highestBidder ? (\n                                        <botton onClick={ () =>{\n                                                this.props.NFTContract.methods.claimNFT(this.props.NFT.tokenID).send({from: this.props.accountAddress, value: this.props.Auction.highestBid, gas: '3000000'});\n                                            }}\n                                        >\n                                            领取\n                                        </botton>\n                                    ) : (\n                                        <botton>\n                                            待领取\n                                        </botton>\n                                    )\n                                ) : (\n                                    <div></div>\n                                )\n                            )\n        \n                        ) : (\n                            <botton>\n                                待出售\n                            </botton>\n                        )\n                    )\n                }\n            </div>\n        )\n    }\n}\n\nexport default NFTinfo;","D:\\Edgedownload\\dacheng\\去中心化NFT拍卖平台\\src\\components\\MyTokens\\MyTokenInfo.jsx",["86"],"import React from \"react\";\n\nclass MyTokenInfo extends React.Component {\n    constructor(props) {\n      super(props);\n    }\n\n    render() {\n        return (\n            <div className=\"col-md-6\">\n                    <div key={this.props.NFT.tokenID} className=\"mt-4\">\n                      <p>\n                        <span className=\"font-weight-bold\">NFT序号</span> :{\" \"}\n                        {this.props.NFT.tokenID}\n                      </p>\n                      <p>\n                        <span className=\"font-weight-bold\">代号</span> :{\" \"}\n                        {this.props.NFT.tokenName}\n                      </p>\n                    </div>\n                    {this.props.NFT.onSale ? (\n                      <div>\n                      <p>\n                          <span className=\"font-weight-bold\">最高出价</span> :{\" \"}\n                          {this.props.Auction.highestBid}\n                      </p>\n                      <p>\n                          <span className=\"font-weight-bold\">结束时间</span> :{\" \"}\n                          {this.props.Auction.endTime}\n                      </p>\n                      {this.props.currentTime >= this.props.Auction.endTime ? (\n                        !this.props.Auction.ended ? (\n                          <button\n                          onClick={ () => {\n                            this.props.NFTContract.methods.endAuction(this.props.NFT.tokenID).send({ from: this.props.accountAddress, gas: '3000000'}).on(\"confirmation\", () => {\n                              window.location.reload();\n                            });\n                          }}\n                          >\n                            结束\n                          </button>\n                        ) : (\n                          <botton>\n                              待领取\n                          </botton>\n                        )\n                        \n                      ) : (\n                      <button>\n                        拍卖中\n                      </button>\n                      )}\n                      </div>\n                    ) : (\n                      <button\n                        onClick={ () => {\n                          let minBid = prompt(\"请输入起拍价\");\n                          let duration = prompt(\"请输入拍卖时间\");\n                          this.props.NFTContract.methods.beginAuction(this.props.NFT.tokenID, minBid, duration).send({ from: this.props.accountAddress, gas: '3000000'}).on(\"confirmation\", () => {\n                            window.location.reload();\n                          });\n                        }}\n                      >\n                        拍卖\n                      </button>\n                    )}\n                  </div>\n        )\n    }\n}\n\nexport default MyTokenInfo;",{"ruleId":"87","replacedBy":"88"},{"ruleId":"89","replacedBy":"90"},{"ruleId":"91","severity":1,"message":"92","line":15,"column":8,"nodeType":"93","messageId":"94","endLine":15,"endColumn":18},{"ruleId":"91","severity":1,"message":"95","line":2,"column":10,"nodeType":"93","messageId":"94","endLine":2,"endColumn":14},{"ruleId":"91","severity":1,"message":"96","line":2,"column":8,"nodeType":"93","messageId":"94","endLine":2,"endColumn":15},{"ruleId":"97","severity":1,"message":"98","line":23,"column":8,"nodeType":"99","endLine":23,"endColumn":14,"suggestions":"100"},{"ruleId":"91","severity":1,"message":"101","line":9,"column":10,"nodeType":"93","messageId":"94","endLine":9,"endColumn":23},{"ruleId":"91","severity":1,"message":"102","line":10,"column":10,"nodeType":"93","messageId":"94","endLine":10,"endColumn":27},{"ruleId":"91","severity":1,"message":"103","line":11,"column":10,"nodeType":"93","messageId":"94","endLine":11,"endColumn":36},{"ruleId":"91","severity":1,"message":"104","line":28,"column":9,"nodeType":"93","messageId":"94","endLine":28,"endColumn":25},{"ruleId":"91","severity":1,"message":"105","line":1,"column":17,"nodeType":"93","messageId":"94","endLine":1,"endColumn":25},{"ruleId":"91","severity":1,"message":"106","line":1,"column":27,"nodeType":"93","messageId":"94","endLine":1,"endColumn":36},{"ruleId":"91","severity":1,"message":"96","line":3,"column":8,"nodeType":"93","messageId":"94","endLine":3,"endColumn":15},{"ruleId":"97","severity":1,"message":"107","line":28,"column":8,"nodeType":"99","endLine":28,"endColumn":14,"suggestions":"108"},{"ruleId":"109","severity":1,"message":"110","line":4,"column":5,"nodeType":"111","messageId":"112","endLine":6,"endColumn":6},{"ruleId":"109","severity":1,"message":"110","line":4,"column":5,"nodeType":"111","messageId":"112","endLine":6,"endColumn":6},"no-native-reassign",["113"],"no-negated-in-lhs",["114"],"no-unused-vars","'MyAuctions' is defined but never used.","Identifier","unusedVar","'Link' is defined but never used.","'Loading' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'loading'. Either include it or remove the dependency array. You can also do a functional update 'setLoading(l => ...)' if you only need 'loading' in the 'setLoading' call.","ArrayExpression",["115"],"'tokenMetadata' is assigned a value but never used.","'tokenMetadataLink' is assigned a value but never used.","'tokenIdForMetadataNotFound' is assigned a value but never used.","'getTokenMetadata' is assigned a value but never used.","'useState' is defined but never used.","'useEffect' is defined but never used.","React Hook useEffect has missing dependencies: 'accountAddress' and 'loading'. Either include them or remove the dependency array. You can also do a functional update 'setLoading(l => ...)' if you only need 'loading' in the 'setLoading' call.",["116"],"no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","no-global-assign","no-unsafe-negation",{"desc":"117","fix":"118"},{"desc":"119","fix":"120"},"Update the dependencies array to be: [NFTs, loading]",{"range":"121","text":"122"},"Update the dependencies array to be: [NFTs, accountAddress, loading]",{"range":"123","text":"124"},[527,533],"[NFTs, loading]",[687,693],"[NFTs, accountAddress, loading]"]